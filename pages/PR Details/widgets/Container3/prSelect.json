{
    "boxShadow": "none",
    "widgetName": "prSelect",
    "isFilterable": true,
    "dynamicPropertyPathList": [
        {"key": "onOptionChange"},
        {"key": "sourceData"}
    ],
    "displayName": "Select",
    "iconSVG": "/static/media/icon.bd99caba5853ad71e4b3d8daffacb3a2.svg",
    "labelText": "PR",
    "searchTags": ["dropdown"],
    "topRow": 4,
    "bottomRow": 8,
    "parentRowSpace": 10,
    "labelWidth": "3",
    "type": "SELECT_WIDGET",
    "serverSideFiltering": true,
    "hideCard": false,
    "defaultOptionValue": "{{ ((options, serverSideFiltering) => ( parseInt(appsmith.URL.queryParams.pr)||\nfetchLast100PRruns.data[0].value\n))(prSelect.options, prSelect.serverSideFiltering) }}",
    "animateLoading": true,
    "parentColumnSpace": 22.1875,
    "dynamicTriggerPathList": [
        {"key": "onOptionChange"},
        {"key": "onFilterUpdate"}
    ],
    "leftColumn": 0,
    "dynamicBindingPathList": [
        {"key": "accentColor"},
        {"key": "borderRadius"},
        {"key": "defaultOptionValue"},
        {"key": "sourceData"}
    ],
    "labelPosition": "Left",
    "placeholderText": "Select option",
    "isDisabled": false,
    "sourceData": "{{InitUtils.getDistinctPrs()}}",
    "key": "5q7up26q11",
    "labelTextSize": "0.875rem",
    "isRequired": false,
    "isDeprecated": false,
    "rightColumn": 39,
    "dynamicHeight": "FIXED",
    "widgetId": "8bqti93qlt",
    "accentColor": "{{appsmith.theme.colors.primaryColor}}",
    "optionValue": "value",
    "isVisible": true,
    "version": 1,
    "parentId": "m1jo7mmxx3",
    "labelAlignment": "left",
    "renderMode": "CANVAS",
    "isLoading": false,
    "optionLabel": "label",
    "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
    "maxDynamicHeight": 9000,
    "onOptionChange": "{{\n// await getPRMetaRuns.run();\n// await getRunData.run();\n// await InitUtils.getRunDataWithMeans();\n// await getPrDetails.run();\nawait storeValue('PR_FAILURES_COUNT', undefined);\nawait getPRMetaRuns.run();\nsetTimeout( async () => {const runIdValue = Utils.getRunIdAttemptOptions()?.[0]?.value;\nawait Promise.all([\n  InitUtils.getRunDataWithMeans(runIdValue)\n]);\nUtils.addPRandMergeRunToURL();\n\t\t\t\t\t\t\t\t\t\t\t\t await InitUtils.storePRFailures();\n\t\t\t\t\t\t\t\t }, 200);\n\tgetPrDetails.run()\n}}",
    "onFilterUpdate": "{{fetchLast100PRruns.run()}}",
    "minDynamicHeight": 4
}